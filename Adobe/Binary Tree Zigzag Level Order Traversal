https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/

***********************************************SOLUTION***********************************************

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) 
    {
        if(root == NULL)
    	return {};
    
        else
        {
            vector<vector<int>> result;
            queue<TreeNode*> pendingQueue;
            pendingQueue.push(root);
            pendingQueue.push(NULL);
            int level = 0;
            stack<int> Node_stack;
            queue<int> Node_queue;
            
            while(!pendingQueue.empty())
            {
                TreeNode* front = pendingQueue.front();
                pendingQueue.pop();
                
                if(front == NULL && !pendingQueue.empty())
                {
                    vector<int> result_vector;
                    if(level % 2 == 0)
                    {
                        //pop the elements from the queue
                        //check whether the queue is empty or not
                        while(!Node_queue.empty())
                        {
                            result_vector.push_back(Node_queue.front());
                            Node_queue.pop();
                        }
                        
                    }
                    else
                    {
                        //pop the elements from the stack
                        //check whether the stack in is empty or not
                        while(!Node_stack.empty())
                        {
                            result_vector.push_back(Node_stack.top());
                            Node_stack.pop();
                        }
                        
                    }
                    level++;
                    pendingQueue.push(NULL);
                    if(result_vector.size() != 0)
                        result.push_back(result_vector);
                }
                else if(front == NULL && pendingQueue.empty())
                {
                    vector<int> result_vector;
                    while(!Node_queue.empty())
                    {
                        result_vector.push_back(Node_queue.front());
                        Node_queue.pop();
                        
                    }
                    
                    while(!Node_stack.empty())
                    {
                        result_vector.push_back(Node_stack.top());
                        Node_stack.pop();
                        
                    }
                    if(result_vector.size() != 0)
                        result.push_back(result_vector);
                }
                else
                {
                    if(level % 2 == 0)
                    {
                        //insert the elements in another queue
                        Node_queue.push(front->val);
                    }
                    else
                    {
                        //Insert the elements in another stack
                        Node_stack.push(front->val);
                    }
                    if(front->left != NULL)
                        pendingQueue.push(front->left);
                    if(front->right != NULL)
                        pendingQueue.push(front->right);
                }
            }
            
            return result;
        }   
    }
};
