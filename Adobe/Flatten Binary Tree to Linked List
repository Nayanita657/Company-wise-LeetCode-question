https://leetcode.com/problems/flatten-binary-tree-to-linked-list/

************************************SOLUTION********************************

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* helper(TreeNode *root)
    {
        if(root == NULL)
            return NULL;
        else
        {
            TreeNode* left = root->left;
            TreeNode* right = root->right;
            root->left = NULaL;
        
            root->right = helper(left);
            TreeNode* temp = root;
            while(temp->right != NULL)
            {
                temp = temp->right;
            }
            temp->right = helper(right);
            
            return root;
        }
    }
    void flatten(TreeNode* root) 
    {
        if(root != NULL)
        {
            root = helper(root);
        }
        
    }
};
